import Head from 'next/head'
import { useEffect, useState } from 'react';
import { api } from '../services/api';
import styles from '../styles/Home.module.css'

type Transacition = {
  id: string,
  title: string,
  description: string,
  status: string,
  amount: number,
  date: string,
  from: string,
  to: string
}

export default function Home() {
  const defaultTransction = {
    "id": "",
    "title": "",
    "description": "",
    "status": "",
    "amount": 0,
    "date": "",
    "from": "",
    "to": ""
  }
  const [allTransaction, setAllTransctions] = useState<Transacition[]>([defaultTransction])
  const [nameFilter, setNameFilter] = useState<string>("")
  const [statusFilter, setStatusFilter] = useState<String>("all")
  const [transctions, setTransctions] = useState<Transacition[]>([defaultTransction])
  const [datailsWindow, setDetailsWindow] = useState<boolean>(false)
  const [transctionOpen, setTransctionOpen] = useState<Transacition>(defaultTransction)

  useEffect(() => {
    const getData = () => {
      api.get('/')
        .then((res) => {
          const data =  res.data;
          setTransctions(data);
          setAllTransctions(data);
        });
    }

    return getData();
  }, [])
  
  useEffect(() => {
    const getItensFilted = () => {
      let transctionsFilted;
      transctionsFilted = 
        nameFilter.length < 2
        ? allTransaction.filter((el) => {
          const status = el.status.normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase()
          const statusInput = statusFilter.normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase()

          const statusCheck = statusInput == "all" 
            ? allTransaction
            : status == statusInput
            return statusCheck
          })
        : allTransaction.filter((el) => {
            const title = el.title.normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase()
            const titleInput = nameFilter.normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase()

            const status = el.status.normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase()
            const statusInput = statusFilter.normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase()

            const statusCheck = statusFilter == "all" 
              ? title.startsWith(titleInput) 
              : status == statusInput && title.startsWith(titleInput);
            console.log(el.title)
            console.log(nameFilter)
            return statusCheck
          });
    
      setTransctions(transctionsFilted)
    }

    return getItensFilted();
  }, [nameFilter])
    
  useEffect(() => {
    const getItensFilted = () => {
      let transctionsFilted;
      transctionsFilted = 
        statusFilter == "all" 
        ? allTransaction.filter((el) => {
            const title = el.title.normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase()
            const titleInput = nameFilter.normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase()

            const titleCheck = titleInput.length < 2
              ? allTransaction
              : title.startsWith(titleInput);
            return titleCheck
          })
        : allTransaction.filter((el) => {
            const title = el.title.normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase()
            const titleInput = nameFilter.normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase()

            const status = el.status.normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase()
            const statusInput = statusFilter.normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase()

            const titleCheck = titleInput.length < 2
              ? status == statusInput
              : status == statusInput && title.startsWith(titleInput);
            console.log(el.title)
            console.log(nameFilter)
            return titleCheck
          });

      setTransctions(transctionsFilted)
    }

    return getItensFilted();
  }, [statusFilter])

  const showDetails = async (id: string) => {
    await api.get(`/${id}`)
      .then((res) => setTransctionOpen(res.data));
    setDetailsWindow(true)
  }

  const closeTransactionOpen = () => {
    setDetailsWindow(false)
    setTransctionOpen(defaultTransction)
  }

  const statusTrasanctionOpen: any = {
    "created": "0%",
    "processing": "50%",
    "processed": "100%"
  }

  const translateData: any = {
    "created": "Solicitada",
    "processing": "Processando",
    "processed": "Concluída"    
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Warren Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {datailsWindow && 
        <section>
          <button 
            className={styles.closeWindowButton} 
            onClick={closeTransactionOpen}
          >
            X
          </button>

          <h1>{transctionOpen.title}</h1>

          <div className={styles.processBar}>
            <span 
              style={{ 
                backgroundColor: "#020202",  
                width: `${statusTrasanctionOpen[transctionOpen.status]}` 
              }} />
          </div>

          <div>
            <p>Solicitada</p>
            <p>Processando</p>
            <p>Concluída</p>
          </div>

          <div>
            <h2>Tranferindo de</h2>
            <table>
              <tbody>
                <tr>
                  <td>{transctionOpen.from}</td>
                  <td>{transctionOpen.amount}</td>
                </tr>
              </tbody>
            </table>
          </div>

          <div>
            <h2>Para</h2>
            <table>
              <tbody>
                <tr>
                  <td>{transctionOpen.to}</td>
                  <td>{transctionOpen.amount}</td>
                </tr>
              </tbody>
            </table>
          </div>
        </section>
      }

      <main className={styles.main}>
        <section>
          <input 
            type="text" 
            onChange={(event) => setNameFilter(event.target.value)} value={nameFilter}
          />

          <select onChange={(event) => setStatusFilter(event.target.value)}>
            <option value="all">Todos</option>
            <option value="created">Solicitada</option>
            <option value="processing">Processando</option>
            <option value="processed">Concluída</option>
          </select>
        </section>

        <table>
          <tbody>
            <tr>
              <th>Titulo</th> 
              <th>Descrição</th>
              <th>Status</th>
              <th>Valor</th>
            </tr>

            {transctions.map((props: Transacition) => {
              return (
                <tr key={props.id} onClick={() => showDetails(props.id)}>
                  <td>{props.title}</td> 
                  <td>{props.description}</td>
                  <td>{translateData[props.status]}</td>
                  <td>{props.amount}</td>
                </tr>         
              )
            })}
          </tbody>
        </table>
      </main>
    </div>
  )
}
