import { GetStaticProps } from 'next';
import Head from 'next/head'
import { useEffect, useState } from 'react';
import { api } from '../services/api';
import styles from '../styles/Home.module.scss'

type Transacition = {
  id: string,
  title: string,
  description: string,
  status: string,
  amount: number,
  date: string,
  from: string,
  to: string
}

type InitialTrasanctions = {
  allTransactions: Transacition[]
}

export default function Home({ allTransactions }: InitialTrasanctions) {
  const defaultTransction = {
    "id": "",
    "title": "",
    "description": "",
    "status": "",
    "amount": 0,
    "date": "",
    "from": "",
    "to": ""
  }
  const [transctions, setTransctions] = useState<Transacition[]>(allTransactions)
  const [nameFilter, setNameFilter] = useState<string>("")
  const [statusFilter, setStatusFilter] = useState<string>("all")
  const [datailsWindow, setDetailsWindow] = useState<boolean>(false)
  const [transctionOpen, setTransctionOpen] = useState<Transacition>(defaultTransction)
  
  useEffect(() => {
    return getItensFiltedByName();
  }, [nameFilter])

  const getItensFiltedByName = () => {
    let transctionsFilted;
    transctionsFilted = 
      nameFilter.length < 2
      ? allTransactions.filter((el) => {
          const status = normalizeString(el.status)
          const statusInput = normalizeString(statusFilter)

          const statusCheck = statusInput == "all" 
          ? allTransactions
          : status == statusInput
          
          return statusCheck
        })
      : allTransactions.filter((el) => {
          const title = normalizeString(el.title)
          const titleInput = normalizeString(nameFilter)

          const status = normalizeString(el.status)
          const statusInput = normalizeString(statusFilter)

          const statusCheck = statusFilter == "all" 
            ? title.startsWith(titleInput) 
            : status == statusInput && title.startsWith(titleInput);
          return statusCheck
        });
  
    setTransctions(transctionsFilted)
  }
    
  useEffect(() => {
    return getItensFiltedByStatus();
  }, [statusFilter]);
  
  const getItensFiltedByStatus = () => {
    let transctionsFilted;
    transctionsFilted = 
      statusFilter == "all" 
      ? allTransactions.filter((el) => {
          const title = normalizeString(el.title);
          const titleInput = normalizeString(nameFilter);

          const titleCheck = titleInput.length < 2
            ? allTransactions
            : title.startsWith(titleInput);
          return titleCheck
        })
      : allTransactions.filter((el) => {
          const title = normalizeString(el.title);
          const titleInput = normalizeString(nameFilter);

          const status = normalizeString(el.status)
          const statusInput = normalizeString(statusFilter)

          const titleCheck = titleInput.length < 2
            ? status == statusInput
            : status == statusInput && title.startsWith(titleInput);
          return titleCheck
        });

    setTransctions(transctionsFilted)
  }
  const normalizeString = (value: string) => {
    return value.normalize('NFD').replace(/[\u0300-\u036f]/g, "").toLowerCase()
  }

  const showDetails = async (id: string) => {
    const { data } = await api.get(`/${id}`);
    setDetailsWindow(true)

    return setTransctionOpen(data)
  }

  const closeTransactionOpen = () => {
    setDetailsWindow(false)
    return () => setTransctionOpen(defaultTransction)
  }

  const statusTrasanctionOpen: any = {
    "created": "5%",
    "processing": "50%",
    "processed": "100%"
  }

  const translateData: any = {
    "created": "Solicitada",
    "processing": "Processando",
    "processed": "Concluída"    
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Warren Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {datailsWindow && 
          <section data-testid="detailsWindow" className={styles.transctionOpen}>
            <button 
              data-testid="close-button"
              className={styles.closeWindowButton} 
              onClick={closeTransactionOpen}
            >
              X
            </button>

            <h2>{transctionOpen.title}</h2>

            <div className={styles.processBar}>
              <div 
                style={{ 
                  width: `${statusTrasanctionOpen[transctionOpen.status]}` 
                }} />
            </div>

            <div className={styles.status}>
              <p>Solicitada</p>
              <p>Processando</p>
              <p>Concluída</p>
            </div>

            <div className={styles.transfer}>
              <h3>Tranferindo de</h3>
              
              <span>{transctionOpen.from}</span>
              <span>- R$ {transctionOpen.amount}</span>
            </div>

            <div className={styles.transfer}>
              <h3>Para</h3>

              <span>{transctionOpen.to}</span>
              <span>+ R$ {transctionOpen.amount}</span>
            </div>
          </section>
        }

        <h1>Transações</h1>
        
        <section className={styles.filters}>
          <input 
            data-testid="search-input"
            type="text" 
            placeholder="Procure pelo título"
            onChange={(event) => setNameFilter(event.target.value)} value={nameFilter}
          />

          <select data-testid="select" onChange={(event) => setStatusFilter(event.target.value)}>
            <option value="all">Todos</option>
            <option value="created">Solicitada</option>
            <option value="processing">Processando</option>
            <option value="processed">Concluída</option>
          </select>
        </section>

        <table className={styles.table}>
          <tbody>
            <tr>
              <th>Titulo</th> 
              <th>Descrição</th>
              <th>Status</th>
              <th>Valor</th>
            </tr>

            {transctions.map((props: Transacition, index) => {
              return (
                <tr data-testid="transaction" id={props.id} key={index} onClick={() => showDetails(props.id)}>
                  <td>{props.title}</td> 
                  <td>{props.description}</td>
                  <td>{translateData[props.status]}</td>
                  <td>R$ {props.amount}</td>
                </tr>         
              )
            })}
          </tbody>
        </table>
      </main>
    </div>
  )
}

export const getStaticProps: GetStaticProps = async () => {
  const { data } = await api.get('/')
  const allTransactions = data;

  return {
    props: {
      allTransactions
    }
  }
}
